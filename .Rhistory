arma::vec gamma_hat = M_star * M;
// Rcout << "ok" << std::endl;
double dYY = as_scalar(d * trans(Y) * Y);
double mbVbmb = as_scalar(trans(mu_b) * iV_b * mu_b);
double bb = dYY + mbVbmb + as_scalar(trans(gamma_hat) * iM_star * gamma_hat) - as_scalar(2 * trans(gamma_hat) * M);
// Rcout << "ok" << std::endl;
double b_star = b + 0.5 * as_scalar(bb);
double a_star = a + (n/2);
// Return results as an R list
return List::create(Named("M_star") = M_star,
Named("gamma_hat") = gamma_hat,
Named("b_star") = b_star,
Named("a_star") = a_star,
Named("iRphi_s") = iR_s);
}
'
Rcpp::sourceCpp(code = code)
tictoc::tic()
fit2 <- fit_cpp_optimized(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
fit1$M_star
fit2$M_star
code <-
'
#include <RcppArmadillo.h>
#include <RcppClock.h>
// [[Rcpp::depends(RcppArmadillo)]]
// [[Rcpp::depends(RcppClock)]]
using namespace Rcpp;
using namespace arma;
// [[Rcpp::export(name = "arma_dist")]]
arma::mat arma_dist(const arma::mat & X){
int n = X.n_rows;
arma::mat D(n, n, arma::fill::zeros); // Allocate a matrix of dimension n x n
for (int i = 0; i < n; i++) {
for(int k = 0; k < i; k++){
D(i, k) = sqrt(sum(pow(X.row(i) - X.row(k), 2)));
D(k, i) = D(i, k);
}
}
return D;
}
// [[Rcpp::export]]
List fit_cpp_clock(const List& data, const List& priors, const arma::mat& coords, const List& hyperpar) {
Rcpp::Clock clock; // mind the headers: //[[Rcpp::depends(RcppClock)]] #include <RcppClock.h> #include <thread>
clock.tick("1");
// Unpack data and priors
arma::vec Y = as<arma::mat>(data["Y"]);
arma::mat X = as<arma::mat>(data["X"]);
arma::vec mu_b = as<arma::vec>(priors["mu_b"]);
arma::mat V_b = as<arma::mat>(priors["V_b"]);
double b = as<double>(priors["b"]);
double a = as<double>(priors["a"]);
double delta = as<double>(hyperpar["delta"]);
double phi = as<double>(hyperpar["phi"]);
int n = Y.n_rows;
int p = X.n_cols;
clock.tock("1");
// arma::mat d_s = C_dist(coords);
arma::mat d_s = arma_dist(coords);
arma::mat Rphi_s = exp(-phi * d_s);
clock.tick("2");
// build the aumentend linear sistem
arma::vec zer_n(n, arma::fill::zeros);
arma::vec Y_star = join_vert(Y, mu_b, zer_n);
arma::mat Zer_np(n, p, arma::fill::zeros);
arma::mat Zer_pn = trans(Zer_np);
arma::mat X_1 = join_vert(X, eye<arma::mat>(p, p), Zer_np);
arma::mat X_2 = join_vert(eye<arma::mat>(n, n), Zer_pn, eye<arma::mat>(n, n));
arma::mat X_star = join_horiz(X_1, X_2);
clock.tock("2");
clock.tick("3");
arma::mat iV_1 = join_vert((1/delta)*eye<arma::mat>(n, n), arma::mat(p+n, n, arma::fill::zeros));
arma::mat iV_2 = join_vert(Zer_np, arma::inv(V_b), Zer_np);
arma::mat iRphi_s = arma::inv(Rphi_s);
arma::mat iV_3 = join_vert(arma::mat(n+p, n, arma::fill::zeros), iRphi_s);
arma::mat iV_star = join_horiz(iV_1, iV_2, iV_3);
clock.tock("3");
clock.tick("4");
// Precompute some reusable values
arma::mat tX_star = trans(X_star);
clock.tock("4");
clock.tick("7");
// conjugate posterior parameters
// arma::mat iM_star = tX_star * iV_star * X_star;
// arma::mat M_star = arma::inv(iM_star);
// arma::mat tXVY = tX_star * iV_star * Y_star;
// arma::vec gamma_hat = M_star * tXVY;
arma::mat tXiV = tX_star * iV_star;
arma::mat M_star = arma::inv(tXiV * X_star);
arma::mat tXVY = tXiV * Y_star;
arma::vec gamma_hat = M_star * tXVY;
clock.tock("7");
clock.tick("5");
arma::mat Xgam = X_star * gamma_hat;
arma::mat SXY = Y_star - (Xgam);
arma::mat tSXY = trans(SXY);
arma::mat bb = tSXY * iV_star * SXY;
double b_star = b + 0.5 * as_scalar(bb);
double a_star = a + (n/2);
clock.tock("5");
clock.stop("Timing");
// Return results as an R list
return List::create(Named("M_star") = M_star,
Named("gamma_hat") = gamma_hat,
Named("b_star") = b_star,
Named("a_star") = a_star,
Named("iRphi_s") = iRphi_s);
}
// Optimized version of fit_cpp function
// [[Rcpp::export]]
List fit_cpp_optimized(const List& data, const List& priors, const arma::mat& coords, const List& hyperpar) {
// Unpack data and priors
arma::mat Y = as<arma::mat>(data["Y"]);
arma::mat X = as<arma::mat>(data["X"]);
arma::vec mu_b = as<arma::vec>(priors["mu_b"]);
arma::mat V_b = as<arma::mat>(priors["V_b"]);
double b = as<double>(priors["b"]);
double a = as<double>(priors["a"]);
double delta = as<double>(hyperpar["delta"]);
double phi = as<double>(hyperpar["phi"]);
int n = Y.n_rows;
arma::mat d_s = arma_dist(coords);
arma::mat Rphi_s = exp(-phi * d_s);
// Precompute some reusable values
double d = (1 / delta);
arma::mat tX = trans(X);
arma::mat iV_b = arma::inv(V_b);
arma::mat iR_s = arma::inv(Rphi_s);
// Compute posterior updating
arma::mat iM_B = d * tX * X + iV_b;
arma::mat iM_BW = d * tX;
arma::mat iM_WB = trans(iM_BW);
arma::mat iM_W = iR_s + (d * eye<arma::mat>(n, n));
arma::mat iM_star1 = join_horiz(iM_B, iM_BW);
arma::mat iM_star2 = join_horiz(iM_WB, iM_W);
arma::mat iM_star = join_vert( iM_star1, iM_star2);
arma::mat M_star = arma::inv(iM_star);
arma::vec M = join_vert( (d * tX * Y) + (iV_b * mu_b) , d * Y );
arma::vec gamma_hat = M_star * M;
double dYY = as_scalar(d * trans(Y) * Y);
double mbVbmb = as_scalar(trans(mu_b) * iV_b * mu_b);
double bb = dYY + mbVbmb + as_scalar(trans(gamma_hat) * iM_star * gamma_hat) - as_scalar(2 * trans(gamma_hat) * M);
double b_star = b + 0.5 * as_scalar(bb);
double a_star = a + (n/2);
// Return results as an R list
return List::create(Named("M_star") = M_star,
Named("gamma_hat") = gamma_hat,
Named("b_star") = b_star,
Named("a_star") = a_star,
Named("iRphi_s") = iR_s);
}
'
Rcpp::sourceCpp(code = code)
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit2 <- fit_cpp_optimized(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit2 <- fit_cpp_optimized(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit2 <- fit_cpp_optimized(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit2 <- fit_cpp_optimized(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit2 <- fit_cpp_optimized(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit2 <- fit_cpp_optimized(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit2 <- fit_cpp_optimized(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
fit1$b_star
fit2$b_star
fit1$a_star
fit2$a_star
fit1$iRphi_s
fit2$iRphi_s
fit1$iRphi_s
fit1$M_star
fit2$M_star
fit1$gamma_hat
fit2$gamma_hat
library(ASMK)
n <- 500
u <- 1000
p <- 2
# parameters
B <- c(-0.75, 1.85)
tau2 <- 0.25
sigma2 <- 1
delta <- tau2/sigma2
phi <- 4
set.seed(20081997)
# generate sintethic data
crd <- matrix(runif((n+u) * 2), ncol = 2)
X_or <- cbind(rep(1, n+u), matrix(runif((p-1)*(n+u)), ncol = (p-1)))
D <- as.matrix(dist(crd))
gc()
Rphi <- exp(-phi * D)
rm("D"); gc()
W_or <- matrix(0, n+u) + mniw::rmNorm(1, rep(0, n+u), sigma2*Rphi)
rm("Rphi"); gc()
Y_or <- X_or %*% B + W_or + mniw::rmNorm(1, rep(0, n+u), diag(delta*sigma2, n+u))
gc()
# sample data
crd_s <- crd[1:n, ]
X <- X_or[1:n, ]
W <- W_or[1:n, ]
Y <- matrix(Y_or[1:n, ])
# prediction data
crd_u <- crd[-(1:n), ]
X_u <- X_or[-(1:n), ]
W_u <- W_or[-(1:n), ]
Y_u <- matrix(Y_or[-(1:n), ])
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
devtools::load_all(".")
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
n <- 500
u <- 1000
p <- 2
q <- 2
# parameters
B     <- matrix(c(-0.75, 1.85, -1.1, 1.9), p, q)
Sigma <- matrix(c(1, 0.3, 0.4, 1), q, q)
alfa <- 0.8
phi   <- 4
set.seed(1997)
# generate sintethic data
crd  <- matrix(runif((n+u) * 2), ncol = 2)
X_or <- cbind(rep(1, n+u), matrix(runif((p-1)*(n+u)), ncol = (p-1)))
D    <- as.matrix(dist(crd))
Rphi <- exp(-phi * D)
W_or <- matrix(0, n+u, q) + mniw::rMNorm(1, Lambda = matrix(0, n+u, q), SigmaR = Rphi, SigmaC = Sigma)
Y_or <- X_or %*% B + W_or + mniw::rMNorm(1, Lambda = matrix(0, n+u, q), SigmaR = diag((1/alfa)-1, n+u), SigmaC = Sigma)
# sample data
crd_s <- crd[1:n, ]
X     <- X_or[1:n, ]
W     <- W_or[1:n, ]
Y     <- Y_or[1:n, ]
# prediction data
crd_u <- crd[-(1:n), ]
X_u   <- X_or[-(1:n), ]
W_u   <- W_or[-(1:n), ]
Y_u   <- Y_or[-(1:n), ]
tictoc::tic()
fit1 <- fit_cpp_MvT(data   = list(Y = Y, X = X),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
coords   = crd_s,
hyperpar = list(alpha = c(0.8),
phi   = c(4)))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp_MvT(data   = list(Y = Y, X = X),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
coords   = crd_s,
hyperpar = list(alpha = c(0.8),
phi   = c(4)))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp_MvT(data   = list(Y = Y, X = X),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
coords   = crd_s,
hyperpar = list(alpha = c(0.8),
phi   = c(4)))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp_MvT(data   = list(Y = Y, X = X),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
coords   = crd_s,
hyperpar = list(alpha = c(0.8),
phi   = c(4)))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp_MvT(data   = list(Y = Y, X = X),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
coords   = crd_s,
hyperpar = list(alpha = c(0.8),
phi   = c(4)))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp_MvT(data   = list(Y = Y, X = X),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
coords   = crd_s,
hyperpar = list(alpha = c(0.8),
phi   = c(4)))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp_MvT(data   = list(Y = Y, X = X),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
coords   = crd_s,
hyperpar = list(alpha = c(0.8),
phi   = c(4)))
tictoc::toc()
n <- 500
u <- 1000
p <- 2
# parameters
B <- c(-0.75, 1.85)
tau2 <- 0.25
sigma2 <- 1
delta <- tau2/sigma2
phi <- 4
set.seed(20081997)
# generate sintethic data
crd <- matrix(runif((n+u) * 2), ncol = 2)
X_or <- cbind(rep(1, n+u), matrix(runif((p-1)*(n+u)), ncol = (p-1)))
D <- as.matrix(dist(crd))
gc()
Rphi <- exp(-phi * D)
rm("D"); gc()
W_or <- matrix(0, n+u) + mniw::rmNorm(1, rep(0, n+u), sigma2*Rphi)
rm("Rphi"); gc()
Y_or <- X_or %*% B + W_or + mniw::rmNorm(1, rep(0, n+u), diag(delta*sigma2, n+u))
gc()
# sample data
crd_s <- crd[1:n, ]
X <- X_or[1:n, ]
W <- W_or[1:n, ]
Y <- matrix(Y_or[1:n, ])
# prediction data
crd_u <- crd[-(1:n), ]
X_u <- X_or[-(1:n), ]
W_u <- W_or[-(1:n), ]
Y_u <- matrix(Y_or[-(1:n), ])
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
tictoc::tic()
fit1 <- fit_cpp(data   = list(Y = Y, X = X),
priors = list(mu_b = rep(0, p),
V_b  = diag(10, p),
a    = 2,
b    = 2),
coords   = crd_s,
hyperpar = list(delta = 0.25,
phi   = 4))
tictoc::toc()
